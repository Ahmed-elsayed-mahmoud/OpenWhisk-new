#
# Licensed to the Apache Software Foundation (ASF) under one or more contributor
# license agreements.  See the NOTICE file distributed with this work for additional
# information regarding copyright ownership.  The ASF licenses this file to you
# under the Apache License, Version 2.0 (the # "License"); you may not use this
# file except in compliance with the License.  You may obtain a copy of the License
# at:
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#
---
# This role installs invokers.

- import_tasks: docker_login.yml

- name: "pull invoker image with tag {{docker.image.tag}}"
  shell: "docker pull {{docker_registry}}{{item}}:{{docker.image.tag}}"
  with_items:
    - '{{ docker.image.prefix }}/invoker'
  when: docker_registry != ""
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: "pull runtime action images with tag {{docker.image.tag}}"
  shell: "docker pull {{docker_registry}}{{docker.image.prefix}}/{{item}}:{{docker.image.tag}}"
  with_items: "{{ runtimesManifest.runtimes.values() | sum(start=[]) | selectattr('deprecated', 'equalto',false)  | map(attribute='image.name') | list | unique }}"
  when: docker_registry != ""
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: "pull blackboxes action images with tag {{docker.image.tag}}"
  shell: "docker pull {{docker_registry}}{{docker.image.prefix}}/{{item.name}}:{{docker.image.tag}}"
  with_items:
    - "{{ runtimesManifest.blackboxes }}"
  when: docker_registry != ""
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: "determine docker root dir on docker-machine"
  uri:  url="http://{{ ansible_host }}:{{ docker.port }}/info" return_content=yes
  register: dockerInfo_output
  when: whisk_version_name == "mac"

- set_fact:
    dockerInfo: "{{ dockerInfo_output['json'] }}"
  when: whisk_version_name == "mac"

- name: "determine docker root dir"
  shell: echo -e "GET http:/v1.24/info HTTP/1.0\r\n" | nc -U /var/run/docker.sock | grep "{"
  args:
    executable: /bin/bash
  register: dockerInfo_output
  when: whisk_version_name != "mac"

- set_fact:
    dockerInfo: "{{ dockerInfo_output.stdout|from_json }}"
  when: whisk_version_name != "mac"

- name: ensure invoker log directory is created with permissions
  file:
    path: "{{ whisk_logs_dir }}/invoker{{ groups['invokers'].index(inventory_hostname) }}"
    state: directory
    mode: 0777
  become: "{{ logs.dir.become }}"

- name: ensure invoker config directory is created with permissions
  file:
    path: "{{ invoker.confdir }}/invoker{{ groups['invokers'].index(inventory_hostname) }}"
    state: directory
    mode: 0777
  become: "{{ invoker.dir.become }}"

- name: "copy kafka truststore/keystore"
  when: kafka.protocol == 'SSL'
  copy:
    src: "{{ openwhisk_home }}/ansible/roles/kafka/files/{{ kafka.ssl.keystore.name }}"
    dest: "{{ invoker.confdir }}/invoker{{ groups['invokers'].index(inventory_hostname) }}"

- name: check, that required databases exist
  include_tasks: "{{ openwhisk_home }}/ansible/tasks/db/checkDb.yml"
  vars:
    dbName: "{{ item }}"
  with_items:
  - "{{ db.whisk.actions }}"
  - "{{ db.whisk.activations }}"

- name: define options when deploying invoker on Ubuntu
  set_fact:
    linuxOptions: "-v /usr/lib/x86_64-linux-gnu/libapparmor.so.1:/usr/lib/x86_64-linux-gnu/libapparmor.so.1"
  when: ansible_distribution == "Ubuntu"

- name: get running invoker information
  uri: url="http://{{ ansible_host }}:{{ docker.port }}/containers/json?filters={{ '{"name":[ "invoker" ],"ancestor":[ "invoker" ]}' | urlencode }}" return_content=yes
  register: invokerInfo_output
  when: whisk_version_name == "mac"

- set_fact:
    invokerInfo: "{{ invokerInfo_output['json'] }}"
  when: whisk_version_name == "mac"

- name: "get invoker info"
  shell: |
    INFO=`echo -e "GET http:/v1.24/containers/json?filters={{ '{"name":[ "invoker" ],"ancestor":[ "invoker" ]}' | urlencode }} HTTP/1.0\r\n" | nc -U /var/run/docker.sock | grep "{"`
    if [ -z "$INFO" ]; then
      echo []
    else
      echo $INFO
    fi
  args:
    executable: /bin/bash
  register: invokerInfo_output
  when: whisk_version_name != "mac"

- set_fact:
    invokerInfo: "{{ invokerInfo_output.stdout|from_json }}"
  when: whisk_version_name != "mac"

- name: determine if more than one invoker is running
  fail:
    msg: "more than one invoker is running"
  when: not invoker.allowMultipleInstances and invokerInfo|length > 1

- name: determine if index of invoker is same with index of inventory host
  fail:
    msg: "invoker index is invalid. expected: /invoker{{ groups['invokers'].index(inventory_hostname) }} found: {{ item.Names[0] }}"
  with_items: "{{ invokerInfo }}"
  when: not invoker.allowMultipleInstances and item.Names[0] != "/invoker{{ groups['invokers'].index(inventory_hostname) }}"

- name: copy jmxremote password file
  when: jmx.enabled
  template:
    src: "jmxremote.password.j2"
    dest: "{{ invoker.confdir  }}/invoker{{ groups['invokers'].index(inventory_hostname) }}/jmxremote.password"
    mode: 0777

- name: copy jmxremote access file
  when: jmx.enabled
  template:
    src: "jmxremote.access.j2"
    dest: "{{ invoker.confdir  }}/invoker{{ groups['invokers'].index(inventory_hostname) }}/jmxremote.access"
    mode: 0777

- name: add additional jvm params if jmxremote is enabled
  when: jmx.enabled
  set_fact:
    invoker_args: "{{ invoker.arguments }} {{ invoker.jmxremote.jvmArgs }}"

- name: start invoker using docker cli
  shell: >
        docker run -d
        --userns=host
        --pid=host
        --privileged
        {{ linuxOptions | default('') }}
        --name invoker{{ groups['invokers'].index(inventory_hostname) }}
        --hostname invoker{{ groups['invokers'].index(inventory_hostname) }}
        --restart {{ docker.restart.policy }}
        -e JAVA_OPTS='-Xmx{{ invoker.heap }} -XX:+CrashOnOutOfMemoryError -XX:+UseGCOverheadLimit -XX:ErrorFile=/logs/java_error.log'
        -e INVOKER_OPTS='{{ invoker_args | default(invoker.arguments) }}'
        -e JMX_REMOTE='{{ jmx.enabled }}'
        -e COMPONENT_NAME='invoker{{ groups['invokers'].index(inventory_hostname) }}'
        -e PORT='8080'
        -e KAFKA_HOSTS='{{ kafka_connect_string }}'
        -e CONFIG_whisk_kafka_replicationFactor='{{ kafka.replicationFactor | default() }}'
        -e CONFIG_whisk_kafka_topics_invoker_retentionBytes='{{ kafka_topics_invoker_retentionBytes | default() }}'
        -e CONFIG_whisk_kafka_topics_invoker_retentionMs='{{ kafka_topics_invoker_retentionMS | default() }}'
        -e CONFIG_whisk_kakfa_topics_invoker_segmentBytes='{{ kafka_topics_invoker_segmentBytes | default() }}'
        -e CONFIG_whisk_kafka_common_securityProtocol='{{ kafka.protocol }}'
        -e CONFIG_whisk_kafka_common_sslTruststoreLocation='/conf/{{ kafka.ssl.keystore.name }}'
        -e CONFIG_whisk_kafka_common_sslTruststorePassword='{{ kafka.ssl.keystore.password }}'
        -e CONFIG_whisk_kafka_common_sslKeystoreLocation='/conf/{{ kafka.ssl.keystore.name }}'
        -e CONFIG_whisk_kafka_common_sslKeystorePassword='{{ kafka.ssl.keystore.password }}'
        -e ZOOKEEPER_HOSTS='{{ zookeeper_connect_string }}'
        -e CONFIG_whisk_couchdb_protocol='{{ db_protocol }}'
        -e CONFIG_whisk_couchdb_host='{{ db_host }}'
        -e CONFIG_whisk_couchdb_port='{{ db_port }}'
        -e CONFIG_whisk_couchdb_username='{{ db_username }}'
        -e CONFIG_whisk_couchdb_password='{{ db_password }}'
        -e CONFIG_whisk_couchdb_provider='{{ db_provider }}'
        -e CONFIG_whisk_couchdb_databases_WhiskAuth='{{ db.whisk.auth }}'
        -e CONFIG_whisk_couchdb_databases_WhiskEntity='{{ db.whisk.actions }}'
        -e CONFIG_whisk_couchdb_databases_WhiskActivation='{{ db.whisk.activations }}'
        -e DB_WHISK_ACTIONS='{{ db.whisk.actions }}'
        -e DB_WHISK_ACTIVATIONS='{{ db.whisk.activations }}'
        -e DB_WHISK_AUTHS='{{ db.whisk.auth }}'
        -e CONFIG_whisk_db_actionsDdoc='{{ db_whisk_actions_ddoc | default() }}'
        -e CONFIG_whisk_db_activationsDdoc='{{ db_whisk_activations_ddoc | default() }}'
        -e CONFIG_whisk_db_activationsFilterDdoc='{{ db_whisk_activations_filter_ddoc | default() }}'
        -e WHISK_API_HOST_PROTO='{{ whisk_api_host_proto | default('https') }}'
        -e WHISK_API_HOST_PORT='{{ whisk_api_host_port | default('443') }}'
        -e WHISK_API_HOST_NAME='{{ whisk_api_host_name | default(groups['edge'] | first) }}'
        -e RUNTIMES_MANIFEST='{{ runtimesManifest | to_json }}'
        -e CONFIG_whisk_runtimes_defaultImagePrefix='{{ runtimes_default_image_prefix | default() }}'
        -e CONFIG_whisk_runtimes_defaultImageTag='{{ runtimes_default_image_tag | default() }}'
        -e CONFIG_whisk_runtimes_bypassPullForLocalImages='{{ runtimes_bypass_pull_for_local_images | default() }}'
        -e CONFIG_whisk_runtimes_localImagePrefix='{{ runtimes_local_image_prefix | default() }}'
        -e DOCKER_REGISTRY='{{ docker_registry }}'
        -e DOCKER_IMAGE_PREFIX='{{ docker.image.prefix }}'
        -e DOCKER_IMAGE_TAG='{{ docker.image.tag }}'
        -e CONFIG_whisk_containerFactory_containerArgs_network='{{ invoker_container_network_name | default("bridge") }}'
        -e INVOKER_CONTAINER_POLICY='{{ invoker_container_policy_name | default()}}'
        {% for item in (invoker_container_network_dns_servers | default()).split(' ')  %}
        -e CONFIG_whisk_containerFactory_containerArgs_dnsServers_{{loop.index0}}={{ item }}
        {% endfor %}
        -e CONFIG_whisk_containerPool_numCore='{{ invoker.numcore }}'
        -e CONFIG_whisk_containerPool_coreShare='{{ invoker.coreshare }}'
        -e CONFIG_whisk_docker_containerFactory_useRunc='{{ invoker.useRunc }}'
        -e INVOKER_NAME='{{ groups['invokers'].index(inventory_hostname) }}'
        -e WHISK_LOGS_DIR='{{ whisk_logs_dir }}'
        -e METRICS_KAMON='{{ metrics.kamon.enabled }}'
        -e METRICS_KAMON_TAGS='{{ metrics.kamon.tags }}'
        -e METRICS_LOG='{{ metrics.log.enabled }}'
        -e CONFIG_kamon_statsd_hostname='{{ metrics.kamon.host }}'
        -e CONFIG_kamon_statsd_port='{{ metrics.kamon.port }}'
        -e CONFIG_whisk_spi_LogStoreProvider='{{ userLogs.spi }}'
        -e CONFIG_logback_log_level='{{ invoker.loglevel }}'
        -e CONFIG_whisk_memory_min='{{ limit_action_memory_min | default() }}'
        -e CONFIG_whisk_memory_max='{{ limit_action_memory_max | default() }}'
        -e CONFIG_whisk_memory_std='{{ limit_action_memory_std | default() }}'
        -e CONFIG_whisk_timeLimit_min='{{ limit_action_time_min | default() }}'
        -e CONFIG_whisk_timeLimit_max='{{ limit_action_time_max | default() }}'
        -e CONFIG_whisk_timeLimit_std='{{ limit_action_time_std | default() }}'
        -e CONFIG_whisk_activation_payload_max='{{ limit_activation_payload | default() }}'
        -v /sys/fs/cgroup:/sys/fs/cgroup
        -v /run/runc:/run/runc
        -v {{ whisk_logs_dir }}/invoker{{ groups['invokers'].index(inventory_hostname) }}:/logs
        -v {{ invoker.confdir }}/invoker{{ groups['invokers'].index(inventory_hostname) }}:/conf
        -v {{ dockerInfo["DockerRootDir"] }}/containers/:/containers
        -v {{ docker_sock | default('/var/run/docker.sock') }}:/var/run/docker.sock
        -p {{ invoker.port + groups['invokers'].index(inventory_hostname) }}:8080
        {% if jmx.enabled %} -p {{ jmx.basePortInvoker + groups['invokers'].index(inventory_hostname) }}:{{ jmx.basePortInvoker + groups['invokers'].index(inventory_hostname) }} {% endif %}
        {% if jmx.enabled %} -p {{ jmx.rmiBasePortInvoker + groups['invokers'].index(inventory_hostname) }}:{{ jmx.rmiBasePortInvoker + groups['invokers'].index(inventory_hostname) }} {% endif %}
        {{ docker_registry }}{{ docker.image.prefix }}/invoker:{{ docker.image.tag }}
        /bin/sh -c "exec /init.sh {{ groups['invokers'].index(inventory_hostname) }} >> /logs/invoker{{ groups['invokers'].index(inventory_hostname) }}_logs.log 2>&1"

# todo: re-enable docker_container module once https://github.com/ansible/ansible-modules-core/issues/5054 is resolved

- name: wait until Invoker is up and running
  uri:
    url: "http://{{ ansible_host }}:{{ invoker.port + groups['invokers'].index(inventory_hostname) }}/ping"
  register: result
  until: result.status == 200
  retries: 12
  delay: 5
